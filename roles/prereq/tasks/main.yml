---
- name: Set SELinux to disabled state
  selinux:
    state: disabled
  when: ansible_facts['os_family'] == "RedHat"

- name: Enable IPv4 forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    reload: yes

- name: Enable IPv6 forwarding
  sysctl:
    name: net.ipv6.conf.default.disable_ipv6
    value: "1"
    state: present
    reload: yes

- name: Enable IPv6 forwarding
  sysctl:
    name: net.ipv6.conf.all.disable_ipv6
    value: "1"
    state: present
    reload: yes

- name: Add br_netfilter to /etc/modules-load.d/
  copy:
    content: "br_netfilter"
    dest: /etc/modules-load.d/br_netfilter.conf
    mode: "u=rw,g=,o="
  when: ansible_facts['os_family'] == "RedHat"

- name: Load br_netfilter
  modprobe:
    name: br_netfilter
    state: present
  when: ansible_facts['os_family'] == "RedHat"

- name: Set bridge-nf-call-iptables (just to be sure)
  sysctl:
    name: "{{ item }}"
    value: "1"
    state: present
    reload: yes
  when: ansible_facts['os_family'] == "RedHat"
  loop:
    - net.bridge.bridge-nf-call-iptables

- name: Add /usr/local/bin to sudo secure_path
  lineinfile:
    line: 'Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin'
    regexp: "Defaults(\\s)*secure_path(\\s)*="
    state: present
    insertafter: EOF
    path: /etc/sudoers
    validate: 'visudo -cf %s'
  when: ansible_facts['os_family'] == "RedHat"

- name: Stop and disable firewalld.
  service:
    name: firewalld
    state: stopped
    enabled: False
  when: ansible_facts['os_family'] == "RedHat"

- name: Install python 3.9
  ansible.builtin.package:
    name: 
      - python3.9
      - python3-pip
      - python3.9-distutils
    state: present

- name: Install Python 3.9 and reset selection to auto
  community.general.alternatives:
    name: python
    path: /usr/bin/python3.9
    link: /usr/bin/python
    state: selected

- name: Upgrade package Redhat
  ansible.builtin.dnf:
    name: '*'
    state: latest
    update_cache: yes
  when: ansible_facts['os_family'] == "RedHat"

- name: Upgrade package Debian
  ansible.builtin.apt:
    name: '*'
    state: latest
    update_cache: yes
    autoclean: yes
    force_apt_get: yes
  when: ansible_facts['os_family'] == "Debian"

- name: upgrade pip
  pip:
    name:
      - pip
    state: forcereinstall
    extra_args: --upgrade
    executable: pip3


- name: install python kubernetes core pre-requisites
  pip:
    name:
      - pyyaml
      - kubernetes
      - jsonpatch
      - kubernetes-validate
      - protobuf<4.21.0
      - etcd3
      - oauthlib
    state: present
    extra_args: --upgrade
    executable: pip3
